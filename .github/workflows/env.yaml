# Generic CI configuration
#
name: haskell-ci

on:
  push:
    tags:
      - v*.*.*

jobs:
  build:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, windows-latest, macos-12] 
        ghc: ["9.4.4"]
        #variant: ["sqlite", "postgres"]

    permissions:
      contents: write
    
    steps:
      # Create environment file
      - name: Setup environment
        shell: bash
        run: |
          REF=${{ github.ref }}
          VERSION=${REF#refs/tags/v}
          echo "D_CACHE=${{ runner.os }}-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV
          echo "D_TAG=${VERSION}-${{ runner.os }}-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV
          echo "D_DATETIME=$(date +%Y-%m-%d@%H:%M:%S)" >> $GITHUB_ENV
          if ${{ runner.os == 'Windows' }}; then
            # As we run stack in MSYS2 bash, backslashes must be converted to forward slashes
            # (or escaped) and path with whitespaces must be quoted
            echo "D_STACK_ROOT=${APPDATA//\\//}/stack" >> $GITHUB_ENV
            echo "D_STACK_PROGS=${LOCALAPPDATA//\\//}/Programs/stack" >> $GITHUB_ENV
            echo "D_PG_INC=\"${PGROOT//\\//}\"/include" >> $GITHUB_ENV
            echo "D_PG_LIB=\"${PGROOT//\\//}\"/lib" >> $GITHUB_ENV
            echo "D_MSYS_ROOT=${LOCALAPPDATA//\\//}/Programs" >> $GITHUB_ENV
            echo "D_BLAS_INC=${LOCALAPPDATA//\\//}/Programs/msys64/clang64/include/openblas" >> $GITHUB_ENV
            echo "D_BLAS_LIB=${LOCALAPPDATA//\\//}/Programs/msys64/clang64/lib" >> $GITHUB_ENV
          else
            echo "D_STACK_ROOT=${HOME}/.stack" >> $GITHUB_ENV
            echo "D_STACK_PROGS=${HOME}/.stack/programs" >> $GITHUB_ENV
            echo "D_PG_INC=$(pg_config --includedir)" >> $GITHUB_ENV
            echo "D_PG_LIB=$(pg_config --pkglibdir)" >> $GITHUB_ENV
            if ${{ runner.os == 'macOS' }}; then
                echo "D_BLAS_INC=/usr/local/opt/openblas/include" >> $GITHUB_ENV
                echo "D_BLAS_LIB=/usr/local/opt/openblas/lib" >> $GITHUB_ENV
            else
                echo "D_BLAS_INC=/usr/include/x86_64-linux-gnu" >> $GITHUB_ENV
                echo "D_BLAS_LIB=/usr/lib/x86_64-linux-gnu" >> $GITHUB_ENV
            fi
          fi
          # Display environment
          set
      # Get source from repo
      - name: Clone project
        uses: actions/checkout@v2

      # Restore cached tools
      - name: Cache ghc, stack and packages
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.D_STACK_ROOT }}
            ${{ env.D_STACK_PROGS }}
          key: ${{ env.D_CACHE }}-${{ hashFiles('**/stack.yaml', '**/snapshot.yaml') }}
          # Restore setup and dependencies even if a stack file has changed
          restore-keys: |
            ${{ env.D_CACHE }}
      
      # Windows: Install msys2 and openblas
      - name: Install msys2 with openblas on Windows
        if: ${{ runner.os == 'Windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: CLANG64
          location: ${{ env.D_MSYS_ROOT }}
          install: mingw-w64-clang-x86_64-openblas

      # Linux: Install openblas
      - name: Install openblas on Linux
        if: ${{ runner.os == 'Linux' }}
        shell: bash
        run: sudo apt-get install libopenblas-dev

      # MacOS: install openblas & update bash
      - name: Install openblas on macOS
        if: ${{ runner.os == 'macOS' }}
        shell: bash
        run: brew install openblas bash
      
      # Build and install in a specific directory
      - name: Build project
        shell: bash
        run: |
          # On windows persistent-postgresql requires PostgreSQL bin or lib directory
          # in the path to find libpq.dll on Windows
          # it needs to be expressed as a msys path (not windows-style)
          if ${{ runner.os == 'Windows' }}; then
            export PATH=$(cd "${PGBIN}" && pwd):$PATH
          else
            export PATH=$(pg_config --bindir):$PATH
          fi
          echo "path: $PATH"
          echo "D_STACK_ROOT: ${{ env.D_STACK_ROOT }}"
          echo "D_STACK_PROGS: ${{ env.D_STACK_PROGS }}"
          echo "D_PG_INC: ${{ env.D_PG_INC }}"
          echo "D_PG_LIB: ${{ env.D_PG_LIB }}"
          echo "D_MSYS_ROOT: ${{ env.D_MSYS_ROOT }}"
          echo "D_BLAS_INC: ${{ env.D_BLAS_INC }}"
          echo "D_BLAS_LIB: ${{ env.D_BLAS_LIB }}"
          ls ${{ env.D_BLAS_INC }}/cblas*
          ls ${{ env.D_BLAS_LIB}}/libopenblas*
          stack \
            --compiler ghc-${{ matrix.ghc }} \
            --skip-msys \
            --extra-include-dirs ${{ env.D_BLAS_INC }} \
            --extra-lib-dirs ${{ env.D_BLAS_LIB }} \
            --extra-include-dirs ${{ env.D_PG_INC }} \
            --extra-lib-dirs ${{ env.D_PG_LIB }} \
            --local-bin-path downloads/${{ env.D_TAG }} \
            install
          
      # Include executables in job
      # - name: Upload executables
        # uses: actions/upload-artifact@v2
        # with:
          # name: executables
          # path: downloads/${{ env.D_TAG }}
      
      # Rename executables
      - name: Rename executables
        shell: bash
        run: | 
          if ${{ runner.os == 'Windows' }}; then
            SFX=${{ env.D_TAG }}.exe
          else
            SFX=${{ env.D_TAG }}
          fi
          for f in downloads/${{ env.D_TAG }}/*; do
            mv ${f} ${f%.exe}-${SFX,,}
          done
          
      # Create release if a tag was pushed
      - name: Publish release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            downloads/${{ env.D_TAG }}/*
